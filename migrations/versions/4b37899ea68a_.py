"""empty message

Revision ID: 4b37899ea68a
Revises: 
Create Date: 2021-03-08 19:21:59.076912

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4b37899ea68a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('timelog')
    op.drop_table('powerdata')
    op.drop_index('armv_timeis_idx', table_name='armv')
    op.drop_table('armv')
    op.drop_table('batch_loc')
    op.drop_table('taglog')
    op.drop_table('marklog')
    op.drop_table('batch')
    op.drop_table('extdata')
    op.drop_table('batch_history')
    op.add_column('userPermissions', sa.Column('test', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('userPermissions', 'test')
    op.create_table('batch_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_batch_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batch_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batch_change_type', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batch_change_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='batch_history_pkey')
    )
    op.create_table('extdata',
    sa.Column('e_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('moment', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dict', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('e_id', name='extdata_pkey')
    )
    op.create_table('batch',
    sa.Column('batch_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batch_size', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('detail_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('product_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_mark', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('order_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('closed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('batchnum', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parentnum', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('route', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('batch_id', name='batch_pkey')
    )
    op.create_table('marklog',
    sa.Column('id_mark', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id_location', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('x_pos', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('y_pos', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('z_pos', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('near_anchor', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('distance', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tolerance', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('moving', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('taglog',
    sa.Column('id_log', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_tag', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id_gate', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rx_power', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rx_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tx_power', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exttype', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('extdata', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('band', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rawdata', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_log', name='taglog_pkey')
    )
    op.create_table('batch_loc',
    sa.Column('batch_loc_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batch_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id_zone', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timeis', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('operation_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('equipment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('state', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batch_size', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('route', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('nop', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('batch_loc_id', name='batch_loc_pkey')
    )
    op.create_table('armv',
    sa.Column('id_armv', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timeis', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id_anchor', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('id_mark', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mean', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('shade', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('maxim', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_armv', name='armv_pkey')
    )
    op.create_index('armv_timeis_idx', 'armv', ['timeis'], unique=False)
    op.create_table('powerdata',
    sa.Column('p_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('moment', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dict', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('p_id', name='powerdata_pkey')
    )
    op.create_table('timelog',
    sa.Column('rx_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###
